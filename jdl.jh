entity User {
    name String required,
	username String required,
    email String required,
    password String required,
    
}
entity Freelancer {
  additionalField Integer min(42) max(42)
}

relationship OneToOne {
  Freelancer{internalUser} to User
}

entity Seeker {
  additionalField Integer min(42) max(42)
}

relationship OneToOne {
  Seeker{internalUser} to User
}




entity BankAccount {
	iban String required,
    bic String required,
    balance Double
}
  
entity Transaction {
	value Double required,
    verwendungszweck String required,
    zahlungsreferenz String,
}

relationship OneToOne {
	BankAccount{userid(firstName)} to User{BankAccount},
}

relationship ManyToOne {
	Transaction{sender(iban)} to BankAccount
}

relationship ManyToOne {
	Transaction{receiver(iban)} to BankAccount
}


service all with serviceImpl



entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

enum Language {
    ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee to Job{employee},
	/**
	* A relationship
	*/
	Department to
	/**
	* Another side of the same relationship
	*/
	Employee{department}
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
    Freelancer{job} to Job,
    Freelancer{BankAccount} to BankAccount,
    Seeker{job} to Job,
    Seeker{BankAccount} to BankAccount,
    Task{task} to Transaction,
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfer Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
